#version 150

struct LightSource{
  //position in view space
  vec4 position;
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
};

struct Material{
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
  // shininess
  float shininess;
};

uniform struct LightSource lightSource;
uniform struct Material material;

// position and normal in viewa space
vec4 blinnPhongReflection(vec4 position, vec3 normal){
	vec4 ambientColor = lightSource.ambient * material.ambient;

	vec4 diffuseColor = saturate(lightSource.diffuse * material.diffuse * dot(normal, normalize(lightSource.position - position)));

	vec3 E = vec3(0, 0, 0) - position.xyz;
	vec3 L = lightSource.position.xyz - position.xyz;
	vec3 H = normalize(E+L);
	float specAngle = saturate(dot(H, N));

	vec4 specularColor = lightSource.specular * material.specular * pow(specAngle, 16);

	return saturate(ambientColor + diffuseColor + specularColor);
}
	
